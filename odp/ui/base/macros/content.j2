{% macro render_table(result) %}
{# Render a paginated list result in a table.
    Column titles can be passed in via columns=[...] or varargs.
    To disable automatic id column rendering, pass hide_id=true.
    Additional query params to append to paging URLs can be passed in via query='&...' or kwargs.
    query should be used when values are repeatable, e.g. query='&collection=CSAG&collection=DFFE'
    Example usage:
        {% call(catalog) render_table(catalogs, 'URL', 'Published records') %}
            <td>{{ catalog.url }}</td>
            <td>{{ catalog.record_count }}</td>
        {% endcall %}
#}
    {% set columns = kwargs.pop('columns', none) or varargs %}
    {% set hide_id = kwargs.pop('hide_id', false) %}
    {% set query = kwargs.pop('query', '') %}

    <table class="table table-hover mt-2">
        <thead>
            <tr>
                {% if not hide_id %}
                    <th scope="col">Id</th>
                {% endif %}
                {% for col in columns %}
                    <th scope="col">{{ col }}</th>
                {% endfor %}
            </tr>
        </thead>
        <tbody>
            {% for obj in result['items'] %}
                <tr>
                    {% if not hide_id %}
                        <th scope="row">{{ obj_link('', obj.id) }}</th>
                    {% endif %}
                    {% if caller %}
                        {{ caller(obj) }}
                    {% endif %}
                </tr>
            {% endfor %}
        </tbody>
    </table>
    {{ pagination(result.page, result.pages, result.total, query=query, **kwargs) }}
{% endmacro %}

{% macro pagination(
    page,
    pages,
    total,
    items_singular='item',
    items_plural='items',
    endpoint='.index',
    query=''
) %}
{# Render pagination info and links.
    Additional query params to append to paging URLs can be passed in via query='&...' or kwargs.
    If kwargs includes 'page' it is ignored.
#}
    {% set _ = kwargs.pop('page', none) %}
    {% for param, value in dict(kwargs).items() %}
        {% if value == '' %}
            {% set _ = kwargs.pop(param) %}
        {% endif %}
    {% endfor %}

    <div class="d-flex my-4 mx-3">
        <span class="mt-2 fw-bold flex-grow-evenly">
            {{ total }} {{ items_singular if total == 1 else items_plural }} found
        </span>

        {% if pages > 1 %}
            <nav>
                <ul class="pagination">
                    {% set disabled = 'disabled' if page <= 1 %}
                    {% set color = 'secondary' if disabled else 'info' %}
                    <li class="page-item {{ disabled }}">
                        <a class="page-link shadow-none text-{{ color }}" href="{{ url_for(endpoint, page=page - 1, **kwargs) }}{{ query }}">
                            &laquo;
                        </a>
                    </li>

                    <li class="page-item dropdown">
                        <a class="page-link shadow-none text-info" data-bs-toggle="dropdown" href="#" role="button">
                            {{ page }}
                        </a>
                        <ul class="dropdown-menu overflow-auto" style="max-height:62vh">
                            {% for num in range(1, pages + 1) %}
                                {% set active = 'active' if num == page %}
                                <li><a class="dropdown-item {{ active }}" href="{{ url_for(endpoint, page=num, **kwargs) }}{{ query }}">
                                    {{ num }}
                                </a></li>
                            {% endfor %}
                        </ul>
                    </li>

                    {% set disabled = 'disabled' if page >= pages %}
                    {% set color = 'secondary' if disabled else 'info' %}
                    <li class="page-item {{ disabled }}">
                        <a class="page-link shadow-none text-{{ color }}" href="{{ url_for(endpoint, page=page + 1, **kwargs) }}{{ query }}">
                            &raquo;
                        </a>
                    </li>
                </ul>
            </nav>
        {% endif %}

        {% if total > 0 %}
            <span class="mt-2 text-end flex-grow-evenly">
                Page {{ page }} of {{ pages }}
            </span>
        {% endif %}
    </div>
{% endmacro %}

{% macro render_tag_table(obj, tags, tag_view, untag_view, enable_buttons) %}
{# Render a paginated list of tag instances for a record or collection.
    Use kwargs to specify field='Column heading' pairs.
    Example usage:
        {{ render_tag_table(collection, project_tags, '.tag_project', '.untag_project', project_tag_enabled,
           project='Project', comment='Comment') }}
#}
    {% set cols = kwargs.values()|list + ['User', 'Timestamp', ''] %}
    {% set fields = kwargs.keys() %}
    {% call(tag_instance) render_table(tags, columns=cols, hide_id=True) %}
        {% for field in fields %}
            <td>{{ tag_instance.data[field] }}</td>
        {% endfor %}
        <td>{{ obj_link('users', tag_instance.user_id, tag_instance.user_name) }}</td>
        <td>{{ tag_instance.timestamp|timestamp }}</td>
        <td class="text-end">
            {{ render_item_delete_form(untag_view, 'tag', enable_buttons, id=obj.id, tag_instance_id=tag_instance.id) }}
        </td>
    {% endcall %}
    <div class="btn-toolbar justify-content-between mt-4">
        <a href="{{ url_for(tag_view, id=obj.id) }}" class="btn btn-outline-success btn-action {{ 'disabled' if not enable_buttons }}">
            Tag
        </a>
    </div>
{% endmacro %}

{% macro render_audit_table(audit_records) %}
{# Render a paginated list of audit records.
    The callback is for filling in the content of the 'Detail' column for a given audit_record.
#}
    {% set orig_caller = caller %}
    {% call(audit_record) render_table(audit_records, 'Table', 'Command', 'Detail', 'User', 'Client', 'Timestamp', hide_id=True) %}
        <td>{{ audit_record.table }}</td>
        <td>{{ audit_record.command }}</td>
        <td>
            {{ orig_caller(audit_record) }}
        </td>
        <td>{{ obj_link('users', audit_record.user_id, audit_record.user_name) }}</td>
        <td>{{ obj_link('clients', audit_record.client_id) }}</td>
        <td>{{ audit_record.timestamp|timestamp }}</td>
    {% endcall %}
{% endmacro %}

{% macro render_button(button) %}
{# Render a Button object. #}
    {% if button.prompt %}
        <form action="{{ url_for(button.endpoint, id=button.object_id) }}" method="post">
            <button type="submit" class="btn btn-{{ 'outline-' if button.outline }}{{ button.theme.value }} btn-action"
                    onclick="return confirm('{{ button.prompt % button.prompt_args }}')" {{ 'disabled' if not button.enabled }}>
                {{ button.label }}
            </button>
        </form>
    {% else %}
        <a href="{{ url_for(button.endpoint, id=button.object_id) }}"
           class="btn btn-{{ 'outline-' if button.outline }}{{ button.theme.value }} btn-action {{ 'disabled' if not button.enabled }}">
            {{ button.label }}
        </a>
    {% endif %}
{% endmacro %}

{% macro render_buttons(buttons) %}
{# Render a row of buttons.
    Each array item may be a Button object, or a string for custom rendering
    via a callback.
#}
    <div class="btn-toolbar justify-content-between mt-4">
        {% for button in buttons %}
            {% if button is string %}
                {{ caller(button) }}
            {% else %}
                {{ render_button(button) }}
            {% endif %}
        {% endfor %}
    </div>
{% endmacro %}

{% macro render_item_delete_form(target, item_desc, enabled) %}
{# Render a table row delete button (small red X).
   Use kwargs to pass params to the target view function.
#}
    <form action="{{ url_for(target, **kwargs) }}" method="post">
        <button type="submit" class="btn btn-outline-danger btn-row-delete p-0" {{ 'disabled' if not enabled }}
                onclick="return confirm('Are you sure you want to delete this {{ item_desc }}?')">
            {{ '&#10060;'|safe }}
        </button>
    </form>
{% endmacro %}

{% macro render_info(obj) %}
{# Render object info in a table.
    Property labels can be passed in via kwarg properties=[...] or via varargs.
    To disable automatic id field rendering, pass kwarg hide_id=True.
    Example usage:
    {% call(prop) render_info(collection, 'Name', 'Provider') %}
        {% if prop == 'Name' %}
            {{ collection.name }}
        {% elif prop == 'Provider' %}
            {{ obj_link('providers', collection.provider_id, collection.provider_key) }}
        {% endif %}
    {% endcall %}
#}
    <table class="table">
        <tbody>
            {% if not kwargs.get('hide_id') %}
                <tr>
                    <th scope="row">Id</th>
                    <td>{{ obj.id }}</td>
                </tr>
            {% endif %}
            {% for prop in kwargs.get('properties') or varargs %}
                <tr>
                    <th scope="row">{{ prop }}</th>
                    <td>{{ caller(prop) }}</td>
                </tr>
            {% endfor %}
        </tbody>
    </table>
{% endmacro %}

{% macro render_form(form, obj, col2_fields) %}
{# Render a form and populate fields from obj, if provided.
    To override the default submit target, pass submit_target=url.
    To override the default cancel target, pass cancel_target=url.
#}
    {% set submit_target = kwargs.get('submit_target') or
        (url_for('.edit', id=obj.id) if obj else url_for('.create'))
    %}
    {% set cancel_target = kwargs.get('cancel_target') or
        (url_for('.view', id=obj.id) if obj else url_for('.index'))
    %}
    <form action="{{ submit_target }}" method="post">
        {{ form.csrf_token }}
        <div class="row">
            <div class="col-5">
                {% for field in form if field.id != 'csrf_token' and field.id not in col2_fields %}
                    {{ render_field(field, obj) }}
                {% endfor %}
            </div>
            <div class="col-7">
                {% for field in form if field.id in col2_fields %}
                    {{ render_field(field, obj) }}
                {% endfor %}
            </div>
        </div>
        <div class="mt-4">
            <button type="submit" class="btn btn-outline-primary btn-action">
                Save
            </button>
            <a href="{{ cancel_target }}" class="btn btn-outline-secondary btn-action">
                Cancel
            </a>
        </div>
    </form>
{% endmacro %}

{% macro render_field(field, obj) %}
    <div class="mt-4">
        {{ field.label(class='form-label') }}
        {% if obj and field.id == 'id' %}
            {{ field(class='form-control', readonly='') }}
        {% elif field.type == 'BooleanField' %}
            <div class="form-check">
                {{ field(class='form-check-input') }}
            </div>
        {% else %}
            {% set classes = ['form-control'] %}
            {% if field.type == 'JSONTextField' %}
                {% set classes = classes + ['font-monospace'] %}
            {% elif field.type in ('MultiCheckboxField', 'RadioField') %}
                {% set classes = classes + ['list-unstyled'] %}
            {% endif %}
            {% if field.errors %}
                {% set classes = classes + ['is-invalid'] %}
            {% endif %}
            {{ field(class=classes|join(' '), spellcheck='false') }}
        {% endif %}
        {% if field.description %}
            <div class="form-text">{{ field.description }}</div>
        {% endif %}
        {% for error in field.errors %}
            <div class="invalid-feedback">
                {{ error }}
            </div>
        {% endfor %}
    </div>
{% endmacro %}

{% macro obj_link(view, obj_id, display_text=None) %}
    {% if obj_id %}
        {% set target = url_for(view ~ '.view', id=obj_id) %}
        <a href="{{ target }}" class="text-decoration-none">
            {{ display_text if display_text is not none else obj_id -}}
        </a>
    {%- endif %}
{%- endmacro %}

{% macro obj_links(view, obj_ids, newlines=False) %}
{# Render a list of object links.
    obj_ids may be a flat list of ids, or a mapping of keys to uuids.
#}
    {% if newlines %}
        {% set sep = '<br/>'|safe %}
    {% else %}
        {% set sep = ', ' %}
    {% endif %}
    {% if obj_ids is mapping %}
        {% for obj_key, obj_id in obj_ids|dictsort %}
            {{ obj_link(view, obj_id, obj_key) }}{% if not loop.last %}{{ sep }}{% endif %}
        {% endfor %}
    {% else %}
        {% for obj_id in obj_ids|sort %}
            {{ obj_link(view, obj_id) }}{% if not loop.last %}{{ sep }}{% endif %}
        {% endfor %}
    {% endif %}
{% endmacro %}
